0000000000000000001 byte{
	primitive 8 bit integer signed,
}
0000000000000000002 boolean{
	primitive 8 bit boolean,
}
0000000000000000003 short{
	primitive 16 bit integer signed,
}
0000000000000000004 char{
	primitive 16 bit integer unicode,
}
0000000000000000005 int{
	primitive 32 bit integer signed,
}
0000000000000000006 float{
	primitive 32 bit decimal IEEE754,
}
0000000000000000007 long{
	primitive 64 bit integer signed,
}
0000000000000000008 double{
	primitive 64 bit decimal IEEE754,
}
0000000000000000010 java.lang.Object{}
0000000000000000011 java.lang.Byte{
	byte value,
}
0000000000000000012 java.lang.Boolean{
	boolean value,
}
0000000000000000013 java.lang.Short{
	short value,
}
0000000000000000014 java.lang.Character{
	char value,
}
0000000000000000015 java.lang.Integer{
	int value,
}
0000000000000000016 java.lang.Float{
	float value,
}
0000000000000000017 java.lang.Long{
	long value,
}
0000000000000000018 java.lang.Double{
	double value,
}
0000000000000000019 java.lang.Void{}
0000000000000000020 java.lang.Class{
	long value,
}
0000000000000000030 java.lang.String{
	[char] value,
}
0000000000000000032 java.lang.StringBuffer{
	long   capacity,
	[char] value   ,
}
0000000000000000033 java.lang.StringBuilder{
	long   capacity,
	[char] value   ,
}
0000000000000000034 java.io.File{
	[char] path,
}
0000000000000000035 java.util.Date{
	long timestamp,
}
0000000000000000037 java.math.BigInteger{
	[byte] value,
}
0000000000000000038 java.math.BigDecimal{
	[char] value,
}
0000000000000000043 java.util.ArrayList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000044 java.util.HashSet{
	float  loadFactor,
	[list] elements  (
		java.lang.Object element,
	),
}
0000000000000000046 java.util.HashMap{
	float  loadFactor,
	[list] elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000048 java.util.Hashtable{
	float  loadFactor,
	[list] elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000049 java.util.ArrayDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000050 java.util.IdentityHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000051 java.util.LinkedHashMap{
	float   loadFactor ,
	boolean accessOrder,
	[list]  elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000052 java.util.LinkedHashSet{
	float  loadFactor,
	[list] elements  (
		java.lang.Object element,
	),
}
0000000000000000054 java.util.LinkedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000056 java.util.PriorityQueue{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000057 java.util.TreeMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000058 java.util.TreeSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000059 java.util.Vector{
	int    capacityIncrement,
	long   capacity         ,
	[list] elements         (
		java.lang.Object element,
	),
}
0000000000000000060 java.util.Stack{
	int    capacityIncrement,
	long   capacity         ,
	[list] elements         (
		java.lang.Object element,
	),
}
0000000000000000061 java.util.Properties{
	java.util.Properties defaults,
	[list]               elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000062 java.util.concurrent.ConcurrentHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000063 java.util.concurrent.ConcurrentLinkedDeque{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000064 java.util.concurrent.ConcurrentLinkedQueue{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000000065 java.util.concurrent.ConcurrentSkipListMap{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000000000066 java.util.concurrent.ConcurrentSkipListSet{
	java.util.Comparator comparator,
	[list]               elements  (
		java.lang.Object element,
	),
}
0000000000000000068 java.util.Locale{
	[char] languageTag,
}
0000000000000000101 [B{
	[list] elements(
		byte element,
	),
}
0000000000000000102 [Z{
	[list] elements(
		boolean element,
	),
}
0000000000000000103 [S{
	[list] elements(
		short element,
	),
}
0000000000000000104 [C{
	[list] elements(
		char element,
	),
}
0000000000000000105 [I{
	[list] elements(
		int element,
	),
}
0000000000000000106 [F{
	[list] elements(
		float element,
	),
}
0000000000000000107 [J{
	[list] elements(
		long element,
	),
}
0000000000000000108 [D{
	[list] elements(
		double element,
	),
}
0000000000000000110 [Ljava.lang.Object;{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000000010000 one.microstream.reference.Lazy$Default{
	java.lang.Object subject,
}
0000000000001000001 java.util.Currency{
	[char] currencyCode,
}
0000000000001000002 java.util.regex.Pattern{
	int    flags  ,
	[char] pattern,
}
0000000000001000003 java.net.InetAddress{
	[char] address,
}
0000000000001000004 java.net.Inet4Address{
	[char] address,
}
0000000000001000005 java.net.Inet6Address{
	[char] address,
}
0000000000001000006 java.nio.file.Path{
	[char] uri,
}
0000000000001000007 java.net.InetSocketAddress{
	java.lang.String     hostname,
	java.net.InetAddress address ,
	int                  port    ,
}
0000000000001000009 java.net.URI{
	[char] address,
}
0000000000001000010 java.net.URL{
	[char] address,
}
0000000000001000011 java.sql.Date{
	long timestamp,
}
0000000000001000012 java.sql.Time{
	long timestamp,
}
0000000000001000013 java.sql.Timestamp{
	long timestamp,
}
0000000000001000014 java.util.OptionalInt{
	boolean isPresent,
	int     value    ,
}
0000000000001000015 java.util.OptionalLong{
	boolean isPresent,
	long    value    ,
}
0000000000001000016 java.util.OptionalDouble{
	boolean isPresent,
	double  value    ,
}
0000000000001000017 java.util.Collections$UnmodifiableNavigableSet$EmptyNavigableSet{}
0000000000001000022 java.util.Collections$UnmodifiableNavigableMap$EmptyNavigableMap{}
0000000000001000026 java.util.Collections$ReverseComparator{}
0000000000001000027 java.util.WeakHashMap{
	[list] elements(
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000028 java.util.concurrent.CopyOnWriteArrayList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000029 java.util.Comparators$NaturalOrderComparator{
	enum INSTANCE,
}
0000000000001000030 java.util.Optional{
	java.lang.Object java.util.Optional#value,
}
0000000000001000031 one.microstream.collections.BulkList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000036 one.microstream.collections.LimitList{
	long   capacity,
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000037 one.microstream.collections.FixedList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000038 one.microstream.collections.ConstList{
	[list] elements(
		java.lang.Object element,
	),
}
0000000000001000039 one.microstream.collections.EqBulkList{
	one.microstream.hashing.HashEqualator hashEqualator,
	long                                  capacity     ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000040 one.microstream.collections.HashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000042 one.microstream.collections.ConstHashEnum{
	float  hashDensity,
	[list] elements   (
		java.lang.Object element,
	),
}
0000000000001000043 one.microstream.collections.EqHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000044 one.microstream.collections.EqConstHashEnum{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000045 one.microstream.collections.HashTable{
	one.microstream.collections.HashTable$Keys   keys       ,
	one.microstream.collections.HashTable$Values values     ,
	float                                        hashDensity,
	[list]                                       elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000047 one.microstream.collections.ConstHashTable{
	one.microstream.collections.ConstHashTable$Keys   keys       ,
	one.microstream.collections.ConstHashTable$Values values     ,
	float                                             hashDensity,
	[list]                                            elements   (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000048 one.microstream.collections.EqHashTable{
	one.microstream.hashing.HashEqualator          hashEqualator,
	one.microstream.collections.EqHashTable$Keys   keys         ,
	one.microstream.collections.EqHashTable$Values values       ,
	float                                          hashDensity  ,
	[list]                                         elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000049 one.microstream.collections.EqConstHashTable{
	one.microstream.hashing.HashEqualator               hashEqualator,
	one.microstream.collections.EqConstHashTable$Keys   keys         ,
	one.microstream.collections.EqConstHashTable$Values values       ,
	float                                               hashDensity  ,
	[list]                                              elements     (
		java.lang.Object key  ,
		java.lang.Object value,
	),
}
0000000000001000050 one.microstream.collections.Singleton{
	java.lang.Object element,
}
0000000000001000051 one.microstream.util.Substituter$Default{
	one.microstream.hashing.HashEqualator hashEqualator,
	float                                 hashDensity  ,
	[list]                                elements     (
		java.lang.Object element,
	),
}
0000000000001000052 one.microstream.persistence.types.PersistenceRoots$Default{
	[list] instances  (
		java.lang.Object instance,
	),
	[list] identifiers(
		[char] identifier,
	),
}
0000000000001000053 one.microstream.persistence.types.PersistenceRootReference$Default{
	java.lang.Object root,
}
0000000000001000054 one.microstream.hashing.XHashing$SingletonValueHashEqualator{}
0000000000001000055 one.microstream.hashing.XHashing$SingletonIdentityHashEqualator{}
0000000000001000056 one.microstream.hashing.XHashing$SingletonKeyValueIdentityHashEqualator{}
0000000000001000057 one.microstream.collections.Empty{}
0000000000001000058 one.microstream.collections.EmptyTable{
	one.microstream.collections.EmptyTable$Keys   one.microstream.collections.EmptyTable#keys  ,
	one.microstream.collections.EmptyTable$Values one.microstream.collections.EmptyTable#values,
}
0000000000001000059 one.microstream.collections.EmptyTable$Keys{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Keys#this$0,
}
0000000000001000060 one.microstream.collections.EmptyTable$Values{
	one.microstream.collections.EmptyTable one.microstream.collections.EmptyTable$Values#this$0,
}
0000000000001000061 java.util.Collections$EmptyList{}
0000000000001000062 java.util.Collections$EmptySet{}
0000000000001000063 java.util.Collections$EmptyMap{}
0000000000001000064 com.microstream.bookstore.data.Data$Default{
	com.microstream.bookstore.data.Books$Default     com.microstream.bookstore.data.Data$Default#books    ,
	com.microstream.bookstore.data.Shops$Default     com.microstream.bookstore.data.Data$Default#shops    ,
	com.microstream.bookstore.data.Customers$Default com.microstream.bookstore.data.Data$Default#customers,
	com.microstream.bookstore.data.Purchases$Default com.microstream.bookstore.data.Data$Default#purchases,
}
0000000000001000065 com.microstream.bookstore.data.Books$Default{
	java.util.Map com.microstream.bookstore.data.Books$Default#isbn13ToBook    ,
	java.util.Map com.microstream.bookstore.data.Books$Default#authorToBooks   ,
	java.util.Map com.microstream.bookstore.data.Books$Default#genreToBooks    ,
	java.util.Map com.microstream.bookstore.data.Books$Default#publisherToBooks,
	java.util.Map com.microstream.bookstore.data.Books$Default#languageToBooks ,
}
0000000000001000067 java.util.Map{}
0000000000001000068 com.microstream.bookstore.data.Shops$Default{
	java.util.List com.microstream.bookstore.data.Shops$Default#shops,
}
0000000000001000069 java.util.List{}
0000000000001000070 com.microstream.bookstore.data.Customers$Default{
	java.util.Map com.microstream.bookstore.data.Customers$Default#customers,
}
0000000000001000071 com.microstream.bookstore.data.Purchases$Default{
	java.util.Map com.microstream.bookstore.data.Purchases$Default#yearlyPurchases,
}
0000000000001000073 com.microstream.bookstore.data.Book$Default{
	java.lang.String                         com.microstream.bookstore.data.Book$Default#isbn13       ,
	java.lang.String                         com.microstream.bookstore.data.Book$Default#title        ,
	com.microstream.bookstore.data.Author    com.microstream.bookstore.data.Book$Default#author       ,
	com.microstream.bookstore.data.Genre     com.microstream.bookstore.data.Book$Default#genre        ,
	com.microstream.bookstore.data.Publisher com.microstream.bookstore.data.Book$Default#publisher    ,
	com.microstream.bookstore.data.Language  com.microstream.bookstore.data.Book$Default#language     ,
	javax.money.MonetaryAmount               com.microstream.bookstore.data.Book$Default#purchasePrice,
	javax.money.MonetaryAmount               com.microstream.bookstore.data.Book$Default#retailPrice  ,
}
0000000000001000074 com.microstream.bookstore.data.Author{}
0000000000001000075 com.microstream.bookstore.data.Genre{}
0000000000001000076 com.microstream.bookstore.data.Publisher{}
0000000000001000077 com.microstream.bookstore.data.Language{}
0000000000001000078 javax.money.MonetaryAmount{}
0000000000001000079 com.microstream.bookstore.data.Author$Default{
	java.lang.String                       com.microstream.bookstore.data.Named$Abstract           #name   ,
	com.microstream.bookstore.data.Address com.microstream.bookstore.data.NamedWithAddress$Abstract#address,
}
0000000000001000082 com.microstream.bookstore.data.Address{}
0000000000001000083 com.microstream.bookstore.data.Genre$Default{
	java.lang.String com.microstream.bookstore.data.Named$Abstract#name,
}
0000000000001000084 com.microstream.bookstore.data.Publisher$Default{
	java.lang.String                       com.microstream.bookstore.data.Named$Abstract           #name   ,
	com.microstream.bookstore.data.Address com.microstream.bookstore.data.NamedWithAddress$Abstract#address,
}
0000000000001000085 com.microstream.bookstore.data.Language$Default{
	java.util.Locale com.microstream.bookstore.data.Language$Default#locale,
}
0000000000001000086 org.javamoney.moneta.RoundedMoney{
	javax.money.CurrencyUnit     org.javamoney.moneta.RoundedMoney#currency       ,
	javax.money.MonetaryContext  org.javamoney.moneta.RoundedMoney#monetaryContext,
	java.math.BigDecimal         org.javamoney.moneta.RoundedMoney#number         ,
	javax.money.MonetaryOperator org.javamoney.moneta.RoundedMoney#rounding       ,
}
0000000000001000087 javax.money.CurrencyUnit{}
0000000000001000088 javax.money.MonetaryContext{
	java.util.Map javax.money.AbstractContext#data,
}
0000000000001000090 javax.money.MonetaryOperator{}
0000000000001000091 com.microstream.bookstore.data.Address$Default{
	java.lang.String                    com.microstream.bookstore.data.Address$Default#address ,
	java.lang.String                    com.microstream.bookstore.data.Address$Default#address2,
	java.lang.String                    com.microstream.bookstore.data.Address$Default#zipCode ,
	com.microstream.bookstore.data.City com.microstream.bookstore.data.Address$Default#city    ,
}
